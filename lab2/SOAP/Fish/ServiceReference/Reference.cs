//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ServiceReference.ILake")]
    public interface ILake
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/AddFish", ReplyAction = "http://tempuri.org/ILake/AddFishResponse")]
        int AddFish();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/AddFish", ReplyAction = "http://tempuri.org/ILake/AddFishResponse")]
        System.Threading.Tasks.Task<int> AddFishAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/ChangeHungry", ReplyAction = "http://tempuri.org/ILake/ChangeHungryResponse")]
        bool ChangeHungry(int index, bool change);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/ChangeHungry", ReplyAction = "http://tempuri.org/ILake/ChangeHungryResponse")]
        System.Threading.Tasks.Task<bool> ChangeHungryAsync(int index, bool change);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/ChangeCaught", ReplyAction = "http://tempuri.org/ILake/ChangeCaughtResponse")]
        bool ChangeCaught(int index);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/ChangeCaught", ReplyAction = "http://tempuri.org/ILake/ChangeCaughtResponse")]
        System.Threading.Tasks.Task<bool> ChangeCaughtAsync(int index);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/TryToFish", ReplyAction = "http://tempuri.org/ILake/TryToFishResponse")]
        bool TryToFish();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ILake/TryToFish", ReplyAction = "http://tempuri.org/ILake/TryToFishResponse")]
        System.Threading.Tasks.Task<bool> TryToFishAsync();
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ILakeChannel : ILake, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class LakeClient : System.ServiceModel.ClientBase<ILake>, ILake
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public LakeClient() :
                base(LakeClient.GetDefaultBinding(), LakeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ILake.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public LakeClient(EndpointConfiguration endpointConfiguration) :
                base(LakeClient.GetBindingForEndpoint(endpointConfiguration), LakeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public LakeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(LakeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public LakeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(LakeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public LakeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public int AddFish()
        {
            return base.Channel.AddFish();
        }

        public System.Threading.Tasks.Task<int> AddFishAsync()
        {
            return base.Channel.AddFishAsync();
        }

        public bool ChangeHungry(int index, bool change)
        {
            return base.Channel.ChangeHungry(index, change);
        }

        public System.Threading.Tasks.Task<bool> ChangeHungryAsync(int index, bool change)
        {
            return base.Channel.ChangeHungryAsync(index, change);
        }

        public bool ChangeCaught(int index)
        {
            return base.Channel.ChangeCaught(index);
        }

        public System.Threading.Tasks.Task<bool> ChangeCaughtAsync(int index)
        {
            return base.Channel.ChangeCaughtAsync(index);
        }

        public bool TryToFish()
        {
            return base.Channel.TryToFish();
        }

        public System.Threading.Tasks.Task<bool> TryToFishAsync()
        {
            return base.Channel.TryToFishAsync();
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILake))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILake))
            {
                return new System.ServiceModel.EndpointAddress("http://127.0.0.1:5000/Service");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return LakeClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ILake);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return LakeClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ILake);
        }

        public enum EndpointConfiguration
        {

            BasicHttpBinding_ILake,
        }
    }
}
